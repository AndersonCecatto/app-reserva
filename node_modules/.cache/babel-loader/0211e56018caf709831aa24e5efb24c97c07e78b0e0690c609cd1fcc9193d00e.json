{"ast":null,"code":"export default {\n  name: \"AutoCompleteFieldComponent\",\n  data: () => ({\n    descriptionLimit: 60,\n    entries: [],\n    isLoading: false,\n    model: null,\n    search: null\n  }),\n  props: {\n    Descricao: String\n  },\n  computed: {\n    //   fields () {\n    //     if (!this.model) return []\n\n    //     return Object.keys(this.model).map(key => {\n    //       return {\n    //         key,\n    //         value: this.model[key] || 'n/a',\n    //       }\n    //     })\n    //   },\n    items() {\n      return this.entries.map(entry => {\n        const Description = entry.Description.length > this.descriptionLimit ? entry.Description.slice(0, this.descriptionLimit) + '...' : entry.Description;\n        return Object.assign({}, entry, {\n          Description\n        });\n      });\n    }\n  },\n  watch: {\n    search(val) {\n      // Items have already been loaded\n      if (this.items.length > 0) return;\n\n      // Items have already been requested\n      if (this.isLoading) return;\n      this.isLoading = true;\n\n      // Lazily load input items\n      fetch('https://api.publicapis.org/entries').then(res => res.json()).then(res => {\n        const {\n          count,\n          entries\n        } = res;\n        this.count = count;\n        this.entries = entries;\n      }).catch(err => {\n        console.log(err);\n      }).finally(() => this.isLoading = false);\n    }\n  }\n};","map":{"version":3,"mappings":"AAkBA;EACAA;EAEAC;IACAC;IACAC;IACAC;IACAC;IACAC;EACA;EACAC;IACAC;EACA;EACAC;IACA;IACA;;IAEA;IACA;IACA;IACA;IACA;IACA;IACA;IACAC;MACA;QACA,uEACAC,4DACAA;QAEA;UAAAC;QAAA;MACA;IACA;EACA;EAEAC;IACAP;MACA;MACA;;MAEA;MACA;MAEA;;MAEA;MACAQ,4CACAC,wBACAA;QACA;UAAAC;UAAAb;QAAA;QACA;QACA;MACA,GACAc;QACAC;MACA,GACAC;IACA;EACA;AACA","names":["name","data","descriptionLimit","entries","isLoading","model","search","props","Descricao","computed","items","entry","Description","watch","fetch","then","count","catch","console","finally"],"sourceRoot":"src/components/Field","sources":["AutoCompleteFieldComponent.vue"],"sourcesContent":["<template>\r\n      <v-autocomplete\r\n        v-model=\"model\"\r\n        :items=\"items\"\r\n        :loading=\"isLoading\"\r\n        :search-input.sync=\"search\"\r\n        color=\"white\"\r\n        hide-no-data\r\n        hide-selected\r\n        item-text=\"Description\"\r\n        item-value=\"API\"\r\n        label=\"Public APIs\"\r\n        placeholder=\"Start typing to Search\"\r\n        prepend-icon=\"mdi-database-search\"\r\n        return-object\r\n      ></v-autocomplete>\r\n</template>\r\n<script>\r\nexport default {\r\n    name: \"AutoCompleteFieldComponent\",\r\n\r\n    data: () => ({\r\n        descriptionLimit: 60,\r\n        entries: [],\r\n        isLoading: false,\r\n        model: null,\r\n        search: null,\r\n    }),\r\n    props: {\r\n        Descricao: String\r\n    },\r\n    computed: {\r\n    //   fields () {\r\n    //     if (!this.model) return []\r\n\r\n    //     return Object.keys(this.model).map(key => {\r\n    //       return {\r\n    //         key,\r\n    //         value: this.model[key] || 'n/a',\r\n    //       }\r\n    //     })\r\n    //   },\r\n      items () {\r\n        return this.entries.map(entry => {\r\n          const Description = entry.Description.length > this.descriptionLimit\r\n            ? entry.Description.slice(0, this.descriptionLimit) + '...'\r\n            : entry.Description\r\n\r\n          return Object.assign({}, entry, { Description })\r\n        })\r\n      },\r\n    },\r\n\r\n    watch: {\r\n      search (val) {\r\n        // Items have already been loaded\r\n        if (this.items.length > 0) return\r\n\r\n        // Items have already been requested\r\n        if (this.isLoading) return\r\n\r\n        this.isLoading = true\r\n\r\n        // Lazily load input items\r\n        fetch('https://api.publicapis.org/entries')\r\n          .then(res => res.json())\r\n          .then(res => {\r\n            const { count, entries } = res\r\n            this.count = count\r\n            this.entries = entries\r\n          })\r\n          .catch(err => {\r\n            console.log(err)\r\n          })\r\n          .finally(() => (this.isLoading = false))\r\n      },\r\n    },\r\n}\r\n</script>\r\n<style>\r\n    \r\n</style>"]},"metadata":{},"sourceType":"module","externalDependencies":[]}