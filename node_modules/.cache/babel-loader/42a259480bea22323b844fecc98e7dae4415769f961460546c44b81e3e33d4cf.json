{"ast":null,"code":"import api from '@/services/api';\nexport default {\n  name: \"AutoCompleteFieldComponent\",\n  data: () => ({\n    entries: [],\n    isLoading: false,\n    model: null,\n    search: null\n  }),\n  computed: {\n    fields() {\n      if (!this.model) return [];\n      return Object.keys(this.model).map(key => {\n        return {\n          key,\n          value: this.model[key] || 'n/a'\n        };\n      });\n    },\n    items() {\n      return this.entries.map(entry => {\n        debugger;\n        const Description = entry.id + ' - ' + entry.nome;\n\n        //this.$emit('Descricao', Description)\n\n        return Object.assign({}, entry, {\n          Description\n        });\n      });\n    }\n  },\n  watch: {\n    search(val) {\n      // Items have already been loaded\n      if (this.items.length > 0) return;\n\n      // Items have already been requested\n      if (this.isLoading) return;\n      this.isLoading = true;\n      api.get(this.Url).then(response => {\n        this.entries = response.data;\n      }).catch(error => {\n        console.log(error);\n      }).finally(() => this.isLoading = false);\n    },\n    model(val) {\n      debugger;\n    }\n  },\n  props: {\n    Url: String,\n    Label: String,\n    Icon: String,\n    Data: String\n  }\n};","map":{"version":3,"mappings":"AAeA;AAEA;EACAA;EAEAC;IACAC;IACAC;IACAC;IACAC;EACA;EACAC;IACAC;MACA;MAEA;QACA;UACAC;UACAC;QACA;MACA;IACA;IACAC;MACA;QACA;QACA;;QAEA;;QAEA;UAAAC;QAAA;MACA;IACA;EACA;EAEAC;IACAP;MACA;MACA;;MAEA;MACA;MAEA;MAEAQ,kBACAC;QACA;MACA,GACAC;QACAC;MACA,GACAC;IACA;IAEAb;MACA;IACA;EACA;EACAc;IACAC;IACAC;IACAC;IACAC;EACA;AACA","names":["name","data","entries","isLoading","model","search","computed","fields","key","value","items","Description","watch","api","then","catch","console","finally","props","Url","Label","Icon","Data"],"sourceRoot":"src/components/Field","sources":["AutoCompleteFieldComponent.vue"],"sourcesContent":["<template>\r\n      <v-autocomplete\r\n        v-model=\"model\"\r\n        :items=\"items\"\r\n        :loading=\"isLoading\"\r\n        :search-input.sync=\"search\"\r\n        item-text=\"Description\"\r\n        item-value=\"id\"\r\n        :label=\"this.Label\"\r\n        :prepend-icon=\"this.Icon\"\r\n        return-object\r\n      ></v-autocomplete>\r\n</template>\r\n<script>\r\n\r\nimport api from '@/services/api'\r\n\r\nexport default {\r\n    name: \"AutoCompleteFieldComponent\",\r\n\r\n    data: () => ({\r\n        entries: [],\r\n        isLoading: false,\r\n        model: null,\r\n        search: null,\r\n    }),\r\n    computed: {\r\n      fields () {\r\n        if (!this.model) return []\r\n\r\n        return Object.keys(this.model).map(key => {\r\n          return {\r\n            key,\r\n            value: this.model[key] || 'n/a',\r\n          }\r\n        })\r\n      },\r\n      items () {\r\n        return this.entries.map(entry => {\r\n          debugger\r\n          const Description = entry.id + ' - ' + entry.nome\r\n\r\n          //this.$emit('Descricao', Description)\r\n\r\n          return Object.assign({}, entry, { Description })\r\n        })\r\n      },\r\n    },\r\n\r\n    watch: {\r\n      search (val) {\r\n        // Items have already been loaded\r\n        if (this.items.length > 0) return\r\n\r\n        // Items have already been requested\r\n        if (this.isLoading) return\r\n\r\n        this.isLoading = true\r\n\r\n        api.get(this.Url)\r\n        .then(response => {\r\n          this.entries = response.data\r\n        })\r\n        .catch(error => {\r\n          console.log(error)\r\n        })\r\n        .finally(() => (this.isLoading = false))\r\n      },\r\n      \r\n      model (val) {\r\n        debugger\r\n      }\r\n    },\r\n    props: {\r\n      Url: String,\r\n      Label: String,\r\n      Icon: String,\r\n      Data: String\r\n    }\r\n}\r\n</script>\r\n<style>\r\n    \r\n</style>"]},"metadata":{},"sourceType":"module","externalDependencies":[]}