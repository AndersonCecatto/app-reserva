{"ast":null,"code":"import GenericMethods from '@/mixins/GenericMethods';\nexport default {\n  name: 'DateDialogFieldComponent',\n  mixins: [GenericMethods],\n  data: vm => ({\n    date: new Date(Date.now() - new Date().getTimezoneOffset() * 60000).toISOString().substring(0, 10),\n    dateFormatted: vm.FormatDate(new Date(Date.now() - new Date().getTimezoneOffset() * 60000).toISOString().substring(0, 10)),\n    modal: false\n  }),\n  methods: {\n    RetornoData() {\n      this.$emit('retornoData', this.dateFormatted);\n    },\n    //Desabilita os dias no calendario\n    disablePastDates(val) {\n      let retorno = val >= new Date().toISOString().substring(0, 10);\n      if (this.regraDesabilitaCampos != null) {\n        debugger;\n        console.log(this.regraDesabilitaCampos);\n        this.regraDesabilitaCampos.split(';').forEach(dia => {\n          if (new Date(val).getDay() == parseInt(dia)) {\n            retorno = retorno && true;\n          }\n        });\n        return retorno;\n      }\n      //return val >= this.validarDias(val)\n      // return val >= new Date().toISOString().substring(0, 10) && new Date(val).getDay() != 6\n\n      return val;\n    },\n    //Verificar isso amanha, o valor que ira vir vai ser uma string do retorno\n    // Tem que verificar como fazer o for nos dias da semana e que funcione certo\n    validarDias(val) {\n      let retorno = new Date().toISOString().substring(0, 10) && new Date(val).getDay() != 6;\n\n      //    retorno = retorno && new Date(val).getDay() != 6\n      // this.regraDesabilitaCampos.split(';').forEach(dia => {\n      //     retorno = retorno && new Date(val).getDay() != parseInt(dia)\n      // })\n\n      return retorno;\n    }\n  },\n  watch: {\n    date(val) {\n      this.dateFormatted = this.FormatDate(this.date);\n    }\n  },\n  props: {\n    regraDesabilitaCampos: String\n  }\n};","map":{"version":3,"mappings":"AA6CA;AAEA;EAEAA;EACAC;EAEAC;IACAC;IACAC;IACAC;EACA;EAEAC;IACAC;MACA;IACA;IAEA;IACAC;MACA;MAEA;QACA;QACAC;QACA;UACA;YACAC;UACA;QACA;QAEA;MAEA;MACA;MACA;;MAEA;IACA;IAEA;IACA;IACAC;MACA;;MAEA;MACA;MACA;MACA;;MAGA;IACA;EACA;EAEAC;IACAT;MACA;IACA;EACA;EAEAU;IACAC;EACA;AACA","names":["name","mixins","data","date","dateFormatted","modal","methods","RetornoData","disablePastDates","console","retorno","validarDias","watch","props","regraDesabilitaCampos"],"sourceRoot":"src/components/Field","sources":["DataDialogFieldComponent.vue"],"sourcesContent":["<template>\r\n    <v-dialog\r\n        ref=\"dialog\"\r\n        v-model=\"modal\"\r\n        :return-value.sync=\"dateFormatted\"\r\n        persistent\r\n        width=\"290px\"\r\n    >\r\n        <template v-slot:activator=\"{ on, attrs }\">\r\n            <v-text-field\r\n                v-model=\"dateFormatted\"\r\n                label=\"Data\"\r\n                prepend-icon=\"mdi-calendar\"\r\n                readonly\r\n                v-bind=\"attrs\"\r\n                v-on=\"on\"\r\n                color=\"green\"\r\n            ></v-text-field>\r\n        </template>\r\n        <v-date-picker\r\n            v-model=\"date\"\r\n            scrollable\r\n            locale=\"pt-br\"\r\n            color=\"green\"\r\n            :allowed-dates=\"disablePastDates\"\r\n        >\r\n        <v-spacer></v-spacer>\r\n        <v-btn\r\n            text\r\n            @click=\"modal = false\"\r\n        >\r\n            Cancelar\r\n        </v-btn>\r\n        <v-btn\r\n            text\r\n            color=\"green\"\r\n            @click=\"$refs.dialog.save(dateFormatted), RetornoData()\"\r\n        >\r\n            OK\r\n        </v-btn>\r\n        </v-date-picker>\r\n    </v-dialog>\r\n</template>\r\n<script>\r\n\r\nimport GenericMethods from '@/mixins/GenericMethods'\r\n\r\nexport default {\r\n\r\n    name:'DateDialogFieldComponent',\r\n    mixins: [GenericMethods],\r\n\r\n    data: (vm) => ({\r\n        date: (new Date(Date.now() - (new Date()).getTimezoneOffset() * 60000)).toISOString().substring(0, 10),\r\n        dateFormatted: vm.FormatDate((new Date(Date.now() - (new Date()).getTimezoneOffset() * 60000)).toISOString().substring(0, 10)),\r\n        modal: false\r\n    }),\r\n\r\n    methods: {\r\n        RetornoData() {\r\n            this.$emit('retornoData', this.dateFormatted)\r\n        },\r\n\r\n        //Desabilita os dias no calendario\r\n        disablePastDates(val) {\r\n            let retorno = val >= new Date().toISOString().substring(0, 10)\r\n\r\n            if (this.regraDesabilitaCampos != null) {\r\n                debugger\r\n                console.log(this.regraDesabilitaCampos)\r\n                this.regraDesabilitaCampos.split(';').forEach(dia => {\r\n                    if (new Date(val).getDay() == parseInt(dia)){\r\n                        retorno = retorno && true\r\n                    }\r\n                })\r\n\r\n                return retorno\r\n\r\n            }\r\n                //return val >= this.validarDias(val)\r\n                // return val >= new Date().toISOString().substring(0, 10) && new Date(val).getDay() != 6\r\n\r\n            return val\r\n        },\r\n\r\n        //Verificar isso amanha, o valor que ira vir vai ser uma string do retorno\r\n        // Tem que verificar como fazer o for nos dias da semana e que funcione certo\r\n        validarDias(val) {\r\n           let retorno = new Date().toISOString().substring(0, 10) && new Date(val).getDay() != 6\r\n\r\n        //    retorno = retorno && new Date(val).getDay() != 6\r\n            // this.regraDesabilitaCampos.split(';').forEach(dia => {\r\n            //     retorno = retorno && new Date(val).getDay() != parseInt(dia)\r\n            // })\r\n\r\n            \r\n            return retorno\r\n        }\r\n    },\r\n\r\n    watch: {\r\n        date (val) {\r\n            this.dateFormatted = this.FormatDate(this.date)\r\n        },\r\n    },\r\n\r\n    props: {\r\n        regraDesabilitaCampos: String\r\n    }\r\n}\r\n</script>\r\n<style>\r\n    \r\n</style>"]},"metadata":{},"sourceType":"module","externalDependencies":[]}